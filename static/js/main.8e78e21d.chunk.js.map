{"version":3,"sources":["components/Status.tsx","components/Card.tsx","common/TextField.tsx","components/FileInput.tsx","common/Button.tsx","service/utils.ts","main/FirstStep.tsx","App.text.ts","service/processing.ts","main/SecondStep.tsx","service/scraping.ts","main/ThirdStep.tsx","main/FourthStep.tsx","App.tsx","reportWebVitals.ts","common/AlertTemplate.tsx","index.tsx"],"names":["useStyles","makeStyles","root","position","right","top","Status","value","successLabel","failureLabel","classes","color","variant","label","Chip","className","size","minWidth","maxWidth","margin","display","title","content","actions","padding","Card","text","completed","CardContent","undefined","Typography","component","CardActions","CustomTextField","withStyles","MUITextField","TextField","onChange","multiline","rows","FileInput","file","setFile","fileInput","useRef","name","type","selectedFile","current","files","ref","hidden","Button","importance","children","other","copyToClipboard","alert","successMessage","INPUT_ID","button","$","click","input","val","append","focus","select","document","execCommand","success","error","currentScroll","documentElement","scrollTop","remove","fillWithZeros","length","result","readFile","a","Promise","resolve","reader","FileReader","onload","event","target","readAsBinaryString","FirstStep","tableData","setTableData","useAlert","useState","rawCsv","setRawCsv","Fragment","e","onClick","then","data","sheet","readXLSX","XLSXUtils","sheet_to_csv","Sheets","SheetNames","readCsv","contents","enteredRegex","exportedRegex","numberFieldPresent","lines","split","map","line","trim","significantLines","filter","test","reduce","res","rawData","child","push","days","meaninglessColumnCount","array","element","index","indexOf","findAllOccurrences","date","findAbsentDates","absentData","i","forEach","day","structureTableData","SecondStep","parsedData","setParsedData","scrapedData","setScrappedData","JSON","parse","ThirdStep","successfulMatches","setSuccessfulMatches","failedMatches","setFailedMatches","join","childrenIds","tableChildren","childrenNames","Object","keys","scrapedSecondNames","match","matches","failures","matchedIds","Map","id","set","matchData","FourthStep","absentIds","get","setAbsentFunction","groupId","dou_id","month","year","outerStyles","innerStyles","Array","from","request","dayStr","monthStr","dateStr","getSetAbsentFunction","Page","styled","div","StepsContainer","Title","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","style","width","AlertTemplate","message","options","Alert","severity","AlertTitle","alertOptions","positions","TOP_CENTER","timeout","ReactDOM","render","StrictMode","template","getElementById"],"mappings":"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","file":"static/js/main.8e78e21d.chunk.js","sourcesContent":["import React from \"react\";\nimport {Chip, makeStyles} from \"@material-ui/core\";\n\ninterface Props {\n    value: boolean,\n    successLabel: string,\n    failureLabel: string\n}\n\nconst useStyles = makeStyles({\n    root: {\n        position: 'absolute',\n        right: '16px',\n        top: '20px'\n    }\n})\n\nconst Status = ({value, successLabel, failureLabel}: Props) => {\n    const classes = useStyles()\n    const color = value ? 'primary' : 'secondary'\n    const variant = value ? 'default' : 'outlined'\n    const label = value ? successLabel : failureLabel\n\n    return (\n        <Chip className={classes.root} variant={variant} size='small' color={color} label={label}/>\n    )\n}\n\nexport default Status","import React from \"react\";\nimport {Card as MUICard, CardActions, CardContent, makeStyles, Typography} from \"@material-ui/core\";\nimport Status from \"./Status\";\n\ninterface Props {\n    title: string,\n    text: string,\n    completed?: boolean,\n    actions?: any,\n    content?: any\n}\n\nconst useStyles = makeStyles({\n    root: {\n        position: 'relative',\n        minWidth: '300px',\n        maxWidth: '420px',\n        margin: '8px',\n        display: 'flex',\n        'flex-direction': 'column'\n    },\n    title: {\n        'margin-bottom': '4px'\n    },\n    content: {\n        display: 'flex',\n        'flex-direction': 'column'\n    },\n    actions: {\n        padding: '0 16px 16px 16px',\n        'justify-content': 'flex-end'\n    }\n})\n\nconst Card = ({title, text, completed, actions, content}: Props) => {\n    const classes = useStyles()\n\n    return (\n        <MUICard className={classes.root}>\n            <CardContent className={classes.content}>\n                {\n                    completed !== undefined &&\n                    <Status value={completed!} successLabel='Completed' failureLabel='Not completed'/>\n                }\n\n                <Typography variant='h6' className={classes.title}>{title}</Typography>\n                <Typography variant='body2' color=\"textSecondary\" component=\"p\">{text}</Typography>\n\n                {content}\n            </CardContent>\n            <CardActions className={classes.actions}>\n                {actions}\n            </CardActions>\n        </MUICard>\n    )\n}\n\nexport default Card","import React, {ChangeEvent} from \"react\";\nimport {TextField as MUITextField} from \"@material-ui/core\";\nimport {withStyles} from \"@material-ui/core/styles\";\n\ninterface Props {\n    label: string,\n    value: string,\n    onChange: (event: ChangeEvent<HTMLTextAreaElement>) => void\n}\n\nexport const CustomTextField = withStyles({\n    root: {\n        'margin-top': '12px'\n    }\n})(MUITextField)\n\nconst TextField = ({label, value, onChange}: Props) => {\n    return (\n        <CustomTextField label={label}\n                         multiline\n                         rows={4}\n                         variant='outlined'\n                         value={value}\n                         onChange={onChange}/>\n    )\n}\n\nexport default TextField","import React, {useRef} from \"react\";\nimport {Button, makeStyles} from \"@material-ui/core\";\n\ninterface Props {\n    file: File | null,\n    setFile: (file: File | null) => void\n}\n\nconst useStyles = makeStyles({\n    root: {\n        'margin-top': '12px'\n    }\n})\n\nconst FileInput = ({file, setFile}: Props) => {\n    const fileInput = useRef<HTMLInputElement>(null)\n\n    const onFileSet = () => {\n        const selectedFile = fileInput.current!.files![0]\n        if (selectedFile) {\n            setFile(selectedFile)\n        } else {\n            setFile(null)\n        }\n    }\n\n    const classes = useStyles()\n\n    return (\n        <Button className={classes.root} variant='outlined' color='secondary' component='label'>\n            {!!file ? file.name : 'Upload table'}\n            <input type='file' onChange={onFileSet} ref={fileInput} hidden/>\n        </Button>\n    )\n\n\n}\n\nexport default FileInput","import React from \"react\";\nimport {Button as MUIButton} from \"@material-ui/core\";\n\ninterface Props {\n    importance: 'primary' | 'secondary',\n    type?: 'button' | 'reset' | 'submit',\n    onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n    children?: any\n}\n\nconst Button = ({importance, children, ...other}: Props) => {\n    const variant = importance === 'primary' ? 'contained' : importance === 'secondary' ? 'outlined' : 'text'\n\n    return (\n        <MUIButton variant={variant} color='primary' {...other}>{children}</MUIButton>\n    )\n}\n\nexport default Button\n","import $ from 'jquery'\nimport {AlertManager} from \"react-alert\";\n\nexport const copyToClipboard = (value: string, alert: AlertManager, successMessage?: string) => {\n    const INPUT_ID = 'very_long_input_id'\n    const button = $('<button>!</button>')\n    button.click(() => {\n        const input = $(`<textarea id=\"${INPUT_ID}\">`)\n        input.val(value)\n\n        $('body').append(input)\n        input.focus()\n        input.select()\n\n        const res = document.execCommand('copy')\n        if (res) {\n            alert.success(successMessage || 'Everything is copied successfully')\n        } else {\n            alert.error('Something is very wrong')\n        }\n\n    })\n    const currentScroll = document.documentElement.scrollTop\n    button.click()\n\n    $(`#${INPUT_ID}`).remove()\n    document.documentElement.scrollTop = currentScroll\n}\n\nexport const fillWithZeros = (value: string, length: number): string => {\n    let result = value\n    while (result.length < length) {\n        result = '0' + result\n    }\n\n    return result\n}\n\nexport const readFile = async (file: File): Promise<string | ArrayBuffer> => {\n    return new Promise((resolve) => {\n        const reader = new FileReader()\n        reader.onload = (event) => {\n            resolve(event.target!.result!)\n        }\n        reader.readAsBinaryString(file)\n    })\n}","import React, {ChangeEvent, useState} from \"react\";\nimport {firstStepText} from \"../App.text\";\nimport Card from \"../components/Card\";\nimport {structureTableData} from \"../service/processing\";\nimport TextField from \"../common/TextField\";\nimport FileInput from \"../components/FileInput\";\nimport Button from \"../common/Button\";\nimport {readFile} from \"../service/utils\";\nimport {read as readXLSX, utils as XLSXUtils} from 'xlsx'\nimport {useAlert} from \"react-alert\";\n\ninterface Props {\n    tableData: any,\n    setTableData: (value: React.SetStateAction<any>) => void,\n}\n\nconst FirstStep = ({tableData, setTableData}: Props) => {\n    const alert = useAlert()\n\n    const [file, setFile] = useState<File | null>(null)\n    const [rawCsv, setRawCsv] = useState('')\n\n    const onRawCsvSet = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setRawCsv(e.target.value)\n    }\n\n    const readCsv = (file: File): Promise<string> => {\n        return readFile(file).then(data => {\n            const sheet = readXLSX(data, {\n                type: 'binary'\n            })\n            return XLSXUtils.sheet_to_csv(sheet.Sheets[sheet.SheetNames[0]])\n        })\n    }\n\n    const onSubmit = () => {\n        if (!file && rawCsv === '') {\n            alert.error('Select a workbook file for conversion or fill the text area with the .csv data. Why the fuck didn\\'t you do this?')\n            return\n        }\n\n        let contentsPromise = !!file ? readCsv(file) : Promise.resolve(rawCsv)\n        contentsPromise.then(contents => setTableData(structureTableData(contents)))\n    }\n\n    return (\n        <Card title='Step 1' text={firstStepText} completed={!!tableData}\n              content={\n                  !tableData &&\n                  <React.Fragment>\n                      <FileInput file={file} setFile={setFile}/>\n                      <TextField label='.csv contents'\n                                 value={rawCsv}\n                                 onChange={onRawCsvSet}/>\n                  </React.Fragment>\n              }\n              actions={\n                  !tableData &&\n                  <Button importance='primary' type='submit' onClick={onSubmit}>Submit</Button>\n              }/>\n    )\n}\n\nexport default FirstStep","export const firstStepText = 'Select a table file to use as a data source or copy and paste the .csv file contents into the text area and then press the \"Submit\" button to read the children data.'\nexport const secondStepText = 'Press the \"Get Function\" button to copy the code to your clipboard. Paste and execute the code on the page with the children list to get the data.'\nexport const thirdStepText = 'Map children from the .csv to the scrapped children from the web page.'\nexport const fourthStepText = 'Press the \"Get Function\" button to copy the code to your clipboard. Paste and execute the code on the page with the children list to set the data from the .csv.'","const findAllOccurrences = (array: any[], element: any) => {\n    const result = []\n    let index = 0\n\n    while (true) {\n        index = array.indexOf(element, index + 1)\n        if (index === -1) {\n            break\n        } else {\n            result.push(index)\n        }\n    }\n\n    return result\n}\n\nconst findAbsentDates = (data: string[], numberFieldPresent: boolean) => {\n    const absentMarker = 'нн'\n    const meaninglessColumnCount = numberFieldPresent ? 4 : 3\n    const absentDates = findAllOccurrences(data, absentMarker)\n\n    return absentDates.map(date => date - meaninglessColumnCount)\n}\n\nexport const structureTableData = (data: string) => {\n    const enteredRegex = /^[0-9]+,[а-яА-я]+ [а-яА-я]+,.*$/\n    const exportedRegex = /^[а-яА-я]+ [а-яА-я]\\. [а-яА-я]\\.,.*$/\n    let numberFieldPresent = true\n\n    const lines = data.split('\\n').map(line => line.trim())\n    let significantLines = lines.filter(line => enteredRegex.test(line))\n    if (significantLines.length === 0) {\n        significantLines = lines.filter(line => exportedRegex.test(line))\n        numberFieldPresent = false\n    }\n\n    const {children, days} = significantLines.reduce((res: any, line: string) => {\n        const rawData = line.split(',')\n        const child = rawData[numberFieldPresent ? 1 : 0]\n        res.children.push(child)\n        res.days.push(findAbsentDates(rawData, numberFieldPresent))\n\n        return res\n    }, {children: [], days: []})\n\n    const absentData: any = {}\n    for (let i = 0; i < children.length; ++i) {\n        const child = children[i]\n        days[i].forEach((day: number) => {\n            if (!absentData[day]) {\n                absentData[day] = []\n            }\n\n            absentData[day].push(child)\n        })\n    }\n\n    return {children, absentData}\n}\n\nexport const matchData = (childrenIds: { [key: string]: string }, tableChildren: string[]) => {\n    const childrenNames = Object.keys(childrenIds)\n    const scrapedSecondNames = childrenNames.map(name => {\n        const match = name.match(/^(.+) .\\. .\\._.*$/)\n        if (match && match[1]) {\n            return match[1]\n        }\n        return name\n    })\n\n    const tableSecondNames = tableChildren.map(name => name.split(' ')[0])\n\n    const matches = tableSecondNames.map(name => {\n        const index = scrapedSecondNames.indexOf(name)\n        if (index === -1) {\n            return null\n        }\n\n        scrapedSecondNames[index] = ''\n        return childrenIds[childrenNames[index]]\n    })\n\n    const failures = []\n    const matchedIds = new Map<string, string>()\n    for (let i = 0; i < matches.length; ++i) {\n        const name = tableChildren[i]\n        const id = matches[i]\n        if (id) {\n            matchedIds.set(name, id)\n        } else {\n            failures.push(name)\n        }\n\n    }\n\n    return {failures, matchedIds}\n}","import React, {ChangeEvent, useState} from \"react\";\nimport {secondStepText} from \"../App.text\";\nimport Card from \"../components/Card\";\nimport {copyToClipboard} from \"../service/utils\";\nimport {scrapChildrenFunction} from \"../service/scraping\";\nimport Button from \"../common/Button\";\nimport TextField from \"../common/TextField\";\nimport {useAlert} from \"react-alert\";\n\ninterface Props {\n    parsedData: any,\n    setParsedData: (value: React.SetStateAction<any>) => void,\n}\n\nconst SecondStep = ({parsedData, setParsedData}: Props) => {\n    const alert = useAlert()\n\n    const [scrapedData, setScrappedData] = useState('')\n\n    const onScrappedDataSet = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setScrappedData(e.target.value)\n    }\n\n    const getFunction = () => {\n        copyToClipboard(scrapChildrenFunction, alert, 'The function was copied successfully.')\n    }\n\n    const onSubmit = () => {\n        if (scrapedData === '') {\n            alert.error('The area you should have filled with the scrapped children data is empty. The fuck?')\n            return\n        }\n\n        setParsedData(JSON.parse(scrapedData))\n    }\n\n    return (\n        <Card title='Step 2' text={secondStepText} completed={!!parsedData}\n              content={\n                  !parsedData &&\n                  <TextField value={scrapedData} label='Function result' onChange={onScrappedDataSet}/>\n              }\n              actions={\n                  !parsedData &&\n                  <React.Fragment>\n                      <Button importance='secondary' type=\"button\" onClick={getFunction}>Get Function</Button>\n                      <Button importance='primary' type=\"submit\" onClick={onSubmit}>Submit</Button>\n                  </React.Fragment>\n              }/>\n    )\n}\n\nexport default SecondStep","import {fillWithZeros} from \"./utils\";\n\nexport const scrapChildrenFunction = `(function() {\n    const children = Array.from($('.j_tr')).slice(1, -1).map(row => {\n        const cells = Array.from($(row).children('td'))\n        const name = cells[1].innerText\n        const id = cells[2].getAttribute('child')\n\n        return {id, name}\n    }).reduce((res, child) => {\n        res[child.name + '_' + child.id] = child.id\n        return res\n    }, {})\n    \n    const groupId = $('#id_group')[0].value\n    const dou_id = $('[name=\"dou_id\"]')[0].value\n    const month = $('#id_period')[0].value\n    const year = $('#id_year')[0].value\n    \n    const data = {children, groupId, dou_id, month, year}\n\n    const copyToClipboard = (value) => {\n        const button = $('<button>!</button>')\n        button.click(() => {\n            const input = $('<input id=\"ultra_input\">')\n            input.val(value)\n\n            $('body').append(input)\n            input.focus()\n            input.select()\n\n            const res = document.execCommand('copy')\n            if (res) {\n                alert('Names and ids were copied successfully')\n            } else {\n                alert('Something went very wrong')\n            }\n\n        })\n        button.click()\n\n        $('#ultra_input').remove()\n    }\n    \n    copyToClipboard(JSON.stringify(data))\n})()`\n\nexport const getSetAbsentFunction = (data: Map<string, string[]>, groupId: string, dou_id: string, month: string, year: string) => {\n    const outerStyles = `position: fixed;\n                        background: #FFC0CBaa;\n                        top: 0;\n                        bottom: 0;\n                        left: 0;\n                        right: 0;\n                        display: flex;\n                        justify-content: center;\n                        align-items: center;`.split('\\n').map(a => a.trim()).join('')\n\n    const innerStyles = `color: #fff;\n                        font-weight: bold;\n                        font-size: 26px;\n                        background: #3333;\n                        border-radius: 8px;\n                        padding: 4px;`.split('\\n').map(a => a.trim()).join('')\n\n    const days = Array.from(data.keys())\n    const request = days.map(day => {\n        const dayStr = fillWithZeros(day, 2)\n        const monthStr = fillWithZeros(month, 2)\n        const dateStr = `${dayStr}.${monthStr}.${year}`\n\n        const childrenIds = data.get(day)\n        return `$.post('/cabinet/children/visit/save/?dou_id=${dou_id}', {children: '${childrenIds!.join('|')}', group: ${groupId}, date: '${dateStr}'}, function(data){\n            --completed\n            if (completed === 0) {\n                cover.remove()\n            }\n        });`\n    }).join('\\n')\n\n    return `\nlet completed = ${days.length}\n\nif (completed > 0) {\n\nlet cover = $('<div style=\"${outerStyles}\"><div style=\"${innerStyles}\">Ща, ща, погоди.</div></div>')\n$('body').append(cover)\n\n${request}\n\n}\n    `\n}","import React, {useState} from \"react\";\nimport {thirdStepText} from \"../App.text\";\nimport Card from \"../components/Card\";\nimport {matchData} from \"../service/processing\";\nimport Button from \"../common/Button\";\nimport {Typography} from \"@material-ui/core\";\nimport {useAlert} from \"react-alert\";\n\ninterface Props {\n    parsedData: any,\n    tableData: any,\n    successfulMatches: Map<string, string> | null,\n    setSuccessfulMatches: (value: React.SetStateAction<Map<string, string> | null>) => void,\n}\n\nconst ThirdStep = ({parsedData, tableData, successfulMatches, setSuccessfulMatches,}: Props) => {\n    const alert = useAlert()\n\n    const [failedMatches, setFailedMatches] = useState<string[]>([])\n\n    const onSubmit = () => {\n        if (!parsedData || !tableData) {\n            alert.error('You should complete the first two steps before you are able to do that. The fuck are you thinking?')\n            return\n        }\n\n        const {failures, matchedIds} = matchData(parsedData.children, tableData.children)\n        setSuccessfulMatches(matchedIds)\n        setFailedMatches(failures)\n    }\n\n    return (\n        <Card title='Step 3' text={thirdStepText} completed={!!successfulMatches}\n              content={\n                  !!failedMatches.length &&\n                  <React.Fragment>\n                      <Typography variant='h6'>Failed to match</Typography>\n                      <Typography variant='body2' color=\"textSecondary\"\n                                  component=\"p\">{failedMatches.join('\\n')}</Typography>\n                  </React.Fragment>\n              }\n              actions={\n                  !successfulMatches &&\n                  <Button importance='primary' type=\"submit\" onClick={onSubmit}>Submit</Button>\n              }/>\n    )\n}\n\nexport default ThirdStep","import React from \"react\";\nimport {fourthStepText} from \"../App.text\";\nimport Card from \"../components/Card\";\nimport {getSetAbsentFunction} from \"../service/scraping\";\nimport {copyToClipboard} from \"../service/utils\";\nimport Button from \"../common/Button\";\nimport {useAlert} from \"react-alert\";\n\ninterface Props {\n    parsedData: any,\n    tableData: any,\n    successfulMatches: Map<string, string> | null,\n}\n\nconst FourthStep = ({parsedData, tableData, successfulMatches}: Props) => {\n    const alert = useAlert()\n\n    const getFunction = () => {\n        if (!successfulMatches) {\n            alert.error('No matched data. Did you do the steps 1-3? The fuck are you thinking?')\n            return\n        }\n\n        const absentIds = new Map<string, string[]>()\n        for (const day in tableData.absentData) {\n            absentIds.set(day, tableData.absentData[day]\n                .map((name: string) => successfulMatches.get(name))\n                .filter((e: any) => !!e)\n            )\n        }\n\n        const setAbsentFunction = getSetAbsentFunction(absentIds, parsedData.groupId, parsedData.dou_id,\n            parsedData.month, parsedData.year)\n        copyToClipboard(setAbsentFunction, alert, 'The function was copied successfully.')\n    }\n\n    return (\n        <Card title='Step 4' text={fourthStepText}\n              actions={\n                  <Button importance='primary' type=\"button\" onClick={getFunction}>Get Function</Button>\n              }/>\n    )\n}\n\nexport default FourthStep","import React, {useState} from 'react';\nimport styled from \"styled-components\";\nimport FirstStep from \"./main/FirstStep\";\nimport SecondStep from \"./main/SecondStep\";\nimport ThirdStep from \"./main/ThirdStep\";\nimport FourthStep from \"./main/FourthStep\";\n\nconst Page = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n`\n\nconst StepsContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: start;\n  flex-wrap: wrap;\n`\n\nconst Title = styled.div`\n  font-size: 32px;\n  font-weight: bold;\n  margin: 20px auto;\n`\n\nconst App = () => {\n    const [tableData, setTableData] = useState<any>(null)\n    const [parsedData, setParsedData] = useState<any>(null)\n    const [successfulMatches, setSuccessfulMatches] = useState<Map<string, string> | null>(null)\n\n    return (\n        <Page>\n            <Title>Ultra Helper</Title>\n\n            <StepsContainer>\n                <FirstStep tableData={tableData} setTableData={setTableData}/>\n\n                <SecondStep parsedData={parsedData} setParsedData={setParsedData}/>\n\n                <ThirdStep parsedData={parsedData} tableData={tableData}\n                           successfulMatches={successfulMatches} setSuccessfulMatches={setSuccessfulMatches}/>\n\n                <FourthStep parsedData={parsedData} tableData={tableData} successfulMatches={successfulMatches}/>\n            </StepsContainer>\n\n        </Page>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {AlertComponentPropsWithStyle} from \"react-alert\";\nimport {Alert, AlertTitle} from \"@material-ui/lab\";\nimport React from \"react\";\n\nconst style = {\n    width: '500px',\n    margin: '4px',\n    'max-width': '100vw'\n}\n\nconst AlertTemplate = ({message, options}: AlertComponentPropsWithStyle) => {\n    const title = options.type === 'error' ? 'Error' :\n        options.type === 'success' ? 'Success' : 'Info'\n\n    return (\n        <Alert style={{...style}} severity={options.type}>\n            <AlertTitle>{title}</AlertTitle>\n            {message}\n        </Alert>\n    )\n}\n\nexport default AlertTemplate","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {positions, Provider as AlertProvider} from \"react-alert\";\nimport AlertTemplate from \"./common/AlertTemplate\";\n\nconst alertOptions = {\n    position: positions.TOP_CENTER,\n    timeout: 5000\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        {\n            <AlertProvider template={AlertTemplate} {...alertOptions}>\n                <App/>\n            </AlertProvider>\n        }\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}