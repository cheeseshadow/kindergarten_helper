{"version":3,"sources":["common/AreaInput.tsx","components/Status.tsx","App.styles.ts","components/Card.tsx","service/utils.ts","main/FirstStep.tsx","App.text.ts","service/processing.ts","main/SecondStep.tsx","service/scraping.ts","main/ThirdStep.tsx","main/FourthStep.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TextArea","styled","textarea","AreaInput","value","placeholder","onChange","Container","div","color","Status","successLabel","failureLabel","Button","button","Wrapper","Title","Block","ConfigButton","enabled","Card","title","text","completed","onConfig","children","onClick","undefined","copyToClipboard","INPUT_ID","$","click","input","val","append","focus","select","document","execCommand","alert","currentScroll","documentElement","scrollTop","remove","fillWithZeros","length","result","FirstStep","tableData","setTableData","useState","rawCsv","setRawCsv","fileInput","useRef","readCsv","file","handler","reader","FileReader","onload","event","target","readAsBinaryString","readFile","sheet","readXLSX","type","XLSXUtils","sheet_to_csv","Sheets","SheetNames","Fragment","ref","e","fileSelected","current","files","contents","data","enteredRegex","exportedRegex","numberFieldPresent","lines","split","map","line","trim","significantLines","filter","test","reduce","res","rawData","child","push","days","meaninglessColumnCount","array","element","index","indexOf","findAllOccurrences","date","findAbsentDates","absentData","i","forEach","day","structureTableData","SecondStep","parsedData","setParsedData","scrapedData","setScrappedData","JSON","parse","ThirdStep","successfulMatches","setSuccessfulMatches","failedMatches","setFailedMatches","join","childrenIds","tableChildren","childrenNames","Object","keys","scrapedSecondNames","name","match","matches","failures","matchedIds","Map","id","set","matchData","FourthStep","absentIds","get","setAbsentFunction","groupId","dou_id","month","year","outerStyles","a","innerStyles","Array","from","request","dayStr","monthStr","dateStr","getSetAbsentFunction","Page","StepsContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.871d1dff.chunk.js","sourcesContent":["import React, {ChangeEvent} from 'react'\nimport styled from \"styled-components\";\n\ninterface Props {\n    value: string,\n    placeholder: string,\n    onChange: (e: ChangeEvent<HTMLTextAreaElement>) => void,\n}\n\nconst TextArea = styled.textarea`\n  resize: none;\n  width: 100%;\n  border: solid #333 1px;\n  border-radius: 4px;\n  padding: 4px;\n  height: 120px;\n  margin-top: 12px;\n`\n\nconst AreaInput = ({value, placeholder, onChange}: Props) => {\n    return (\n        <TextArea placeholder={placeholder} value={value} onChange={onChange}/>\n    )\n}\n\nexport default AreaInput","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface Props {\n    value: boolean,\n    successLabel: string,\n    failureLabel: string\n}\n\nconst Container = styled.div<{ color: string }>`\n  display: inline;\n  padding: 4px;\n  text-transform: lowercase;\n  border-radius: 8px;\n  border: ${({color}) => color} 1px solid;\n  color: ${({color}) => color};\n`\n\nconst Status = ({value, successLabel, failureLabel}: Props) => {\n    return (\n        <Container color={value ? '#39C700' : '#C70039'}>{value ? successLabel : failureLabel}</Container>\n    )\n}\n\nexport default Status","import styled from \"styled-components\";\n\nexport const Button = styled.button`\n  border-radius: 4px;\n  border: solid 1px #0039C7;\n  color: #0039C7;\n  background: white;\n  margin-top: 12px;\n  height: 40px;\n\n  &:hover {\n    background: #ccdaff;\n  }\n`\n\nexport const Wrapper = styled.div`\n  margin: 4px 0;\n`\n\nexport const Title = styled.div`\n  display: inline;\n  font-weight: bold;\n`","import React from \"react\";\nimport styled from \"styled-components\";\nimport Status from \"./Status\";\nimport {Title, Wrapper} from \"../App.styles\";\n\ninterface Props {\n    title: string,\n    text: string,\n    completed?: boolean,\n    onConfig?: any,\n    children?: any\n}\n\nconst Block = styled.div`\n  display: flex;\n  position: relative;\n  flex-direction: column;\n  width: 420px;\n  margin: 8px;\n  box-shadow: 0 1px 5px rgba(0, 0, 0, .3), 0 3px 30px rgba(0, 0, 0, .3);\n  border-radius: 6px;\n  padding: 44px 32px 32px 32px;\n`\n\nconst ConfigButton = styled.button<{ enabled: boolean }>`\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  border: none;\n  border-radius: 50%;\n  right: 16px;\n  top: 16px;\n  cursor: ${({enabled}) => enabled ? 'pointer' : 'default'};\n  background: ${({enabled}) => enabled ? '#FFC300' : '#eee'}\n`\n\nconst Card = ({title, text, completed, onConfig, children}: Props) => {\n    return (\n        <Block>\n            <ConfigButton enabled={!!onConfig} onClick={onConfig}/>\n\n            <Wrapper><Title>{title}:</Title> {text}</Wrapper>\n            {\n                completed !== undefined &&\n                <Wrapper><Title>Status:</Title> <Status value={completed!} successLabel='Completed'\n                                                        failureLabel='Not completed'/></Wrapper>\n            }\n\n            {children}\n        </Block>\n    )\n}\n\nexport default Card","import $ from 'jquery'\n\nexport const copyToClipboard = (value: string) => {\n    const INPUT_ID = 'very_long_input_id'\n    const button = $('<button>!</button>')\n    button.click(() => {\n        const input = $(`<textarea id=\"${INPUT_ID}\">`)\n        input.val(value)\n\n        $('body').append(input)\n        input.focus()\n        input.select()\n\n        const res = document.execCommand('copy')\n        if (res) {\n            alert('Everything is copied successfully')\n        } else {\n            alert('Something is very wrong')\n        }\n\n    })\n    const currentScroll = document.documentElement.scrollTop\n    button.click()\n\n    $(`#${INPUT_ID}`).remove()\n    document.documentElement.scrollTop = currentScroll\n}\n\nexport const fillWithZeros = (value: string, length: number): string => {\n    let result = value\n    while (result.length < length) {\n        result = '0' + result\n    }\n\n    return result\n}\n\nexport const readFile = (file: File, handler: (result: string | ArrayBuffer) => string): string => {\n    const reader = new FileReader()\n    let result = ''\n\n    reader.onload = (event) => {\n        result = handler(event.target!.result!)\n    }\n    reader.readAsBinaryString(file)\n\n    return result\n}","import React, {ChangeEvent, useRef, useState} from \"react\";\nimport {firstStepText} from \"../App.text\";\nimport AreaInput from \"../common/AreaInput\";\nimport Card from \"../components/Card\";\nimport {structureTableData} from \"../service/processing\";\nimport {Button} from \"../App.styles\";\nimport {readFile} from \"../service/utils\";\nimport {read as readXLSX, utils as XLSXUtils} from 'xlsx'\n\ninterface Props {\n    tableData: any,\n    setTableData: (value: React.SetStateAction<any>) => void,\n}\n\nconst FirstStep = ({tableData, setTableData}: Props) => {\n    const [rawCsv, setRawCsv] = useState('')\n    const fileInput = useRef<HTMLInputElement>(null)\n\n    const onRawCsvSet = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setRawCsv(e.target.value)\n    }\n\n    const readCsv = (file: File): string => {\n        return readFile(file, (result) => {\n            const sheet = readXLSX(result, {\n                type: 'binary'\n            })\n            return XLSXUtils.sheet_to_csv(sheet.Sheets[sheet.SheetNames[0]])\n        })\n    }\n\n    const onSubmit = () => {\n        const fileSelected = fileInput.current!.files && fileInput.current!.files[0]\n        if (!fileSelected && rawCsv === '') {\n            alert('Select a workbook file for conversion or fill the text area with the .csv data. Why the fuck didn\\'t you do this?')\n            return\n        }\n\n        let contents = rawCsv\n        if (fileSelected) {\n            contents = readCsv(fileInput.current!.files![0])\n        }\n\n        setTableData(structureTableData(contents))\n    }\n\n    return (\n        <Card title='Step 1' text={firstStepText} completed={!!tableData}>\n            {\n                !tableData &&\n                <React.Fragment>\n                    <input type='file' ref={fileInput}/>\n                    <AreaInput value={rawCsv} placeholder={'Paste the .csv file contents here'}\n                               onChange={onRawCsvSet}/>\n                    <Button type=\"submit\" onClick={onSubmit}>Submit</Button>\n                </React.Fragment>\n            }\n        </Card>\n    )\n}\n\nexport default FirstStep","export const firstStepText = 'Copy and paste the .csv file contents into the text area and then press the Submit button to read the children data.'\nexport const secondStepText = 'Press the Get Function button to copy the code to your clipboard. Paste and execute the code on the page with the children list to get the data.'\nexport const thirdStepText = 'Map children from the .csv to the scrapped children from the web page.'\nexport const fourthStepText = 'Press the Get Function button to copy the code to your clipboard. Paste and execute the code on the page with the children list to set the data from the .csv.'","const findAllOccurrences = (array: any[], element: any) => {\n    const result = []\n    let index = 0\n\n    while (true) {\n        index = array.indexOf(element, index + 1)\n        if (index === -1) {\n            break\n        } else {\n            result.push(index)\n        }\n    }\n\n    return result\n}\n\nconst findAbsentDates = (data: string[], numberFieldPresent: boolean) => {\n    const absentMarker = 'нн'\n    const meaninglessColumnCount = numberFieldPresent ? 4 : 3\n    const absentDates = findAllOccurrences(data, absentMarker)\n\n    return absentDates.map(date => date - meaninglessColumnCount)\n}\n\nexport const structureTableData = (data: string) => {\n    const enteredRegex = /^[0-9]+,[а-яА-я]+ [а-яА-я]+,.*$/\n    const exportedRegex = /^[а-яА-я]+ [а-яА-я]\\. [а-яА-я]\\.,.*$/\n    let numberFieldPresent = true\n\n    const lines = data.split('\\n').map(line => line.trim())\n    let significantLines = lines.filter(line => enteredRegex.test(line))\n    if (significantLines.length === 0) {\n        significantLines = lines.filter(line => exportedRegex.test(line))\n        numberFieldPresent = false\n    }\n\n    const {children, days} = significantLines.reduce((res: any, line: string) => {\n        const rawData = line.split(',')\n        const child = rawData[numberFieldPresent ? 1 : 0]\n        res.children.push(child)\n        res.days.push(findAbsentDates(rawData, numberFieldPresent))\n\n        return res\n    }, {children: [], days: []})\n\n    const absentData: any = {}\n    for (let i = 0; i < children.length; ++i) {\n        const child = children[i]\n        days[i].forEach((day: number) => {\n            if (!absentData[day]) {\n                absentData[day] = []\n            }\n\n            absentData[day].push(child)\n        })\n    }\n\n    return {children, absentData}\n}\n\nexport const matchData = (childrenIds: { [key: string]: string }, tableChildren: string[]) => {\n    const childrenNames = Object.keys(childrenIds)\n    const scrapedSecondNames = childrenNames.map(name => {\n        const match = name.match(/^(.+) .\\. .\\._.*$/)\n        if (match && match[1]) {\n            return match[1]\n        }\n        return name\n    })\n\n    const tableSecondNames = tableChildren.map(name => name.split(' ')[0])\n\n    const matches = tableSecondNames.map(name => {\n        const index = scrapedSecondNames.indexOf(name)\n        if (index === -1) {\n            return null\n        }\n\n        scrapedSecondNames[index] = ''\n        return childrenIds[childrenNames[index]]\n    })\n\n    const failures = []\n    const matchedIds = new Map<string, string>()\n    for (let i = 0; i < matches.length; ++i) {\n        const name = tableChildren[i]\n        const id = matches[i]\n        if (id) {\n            matchedIds.set(name, id)\n        } else {\n            failures.push(name)\n        }\n\n    }\n\n    return {failures, matchedIds}\n}","import React, {ChangeEvent, useState} from \"react\";\nimport {secondStepText} from \"../App.text\";\nimport AreaInput from \"../common/AreaInput\";\nimport Card from \"../components/Card\";\nimport {Button} from \"../App.styles\";\nimport {copyToClipboard} from \"../service/utils\";\nimport {scrapChildrenFunction} from \"../service/scraping\";\n\ninterface Props {\n    parsedData: any,\n    setParsedData: (value: React.SetStateAction<any>) => void,\n}\n\nconst SecondStep = ({parsedData, setParsedData}: Props) => {\n    const [scrapedData, setScrappedData] = useState('')\n\n    const onScrappedDataSet = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setScrappedData(e.target.value)\n    }\n\n    const getFunction = () => {\n        copyToClipboard(scrapChildrenFunction)\n    }\n\n    const onSubmit = () => {\n        if (scrapedData === '') {\n            alert('The area you should have filled with the scrapped children data is empty. The fuck?')\n            return\n        }\n\n        setParsedData(JSON.parse(scrapedData))\n    }\n\n    return (\n        <Card title='Step 2' text={secondStepText} completed={!!parsedData}>\n            {\n                !parsedData &&\n                <React.Fragment>\n                    <Button type=\"button\" onClick={getFunction}>Get Function</Button>\n\n                    <AreaInput value={scrapedData} placeholder={'Paste the result of the function here'}\n                               onChange={onScrappedDataSet}/>\n                    <Button type=\"submit\" onClick={onSubmit}>Submit</Button>\n                </React.Fragment>\n            }\n        </Card>\n    )\n}\n\nexport default SecondStep","import {fillWithZeros} from \"./utils\";\n\nexport const scrapChildrenFunction = `(function() {\n    const children = Array.from($('.j_tr')).slice(1, -1).map(row => {\n        const cells = Array.from($(row).children('td'))\n        const name = cells[1].innerText\n        const id = cells[2].getAttribute('child')\n\n        return {id, name}\n    }).reduce((res, child) => {\n        res[child.name + '_' + child.id] = child.id\n        return res\n    }, {})\n    \n    const groupId = $('#id_group')[0].value\n    const dou_id = $('[name=\"dou_id\"]')[0].value\n    const month = $('#id_period')[0].value\n    const year = $('#id_year')[0].value\n    \n    const data = {children, groupId, dou_id, month, year}\n\n    const copyToClipboard = (value) => {\n        const button = $('<button>!</button>')\n        button.click(() => {\n            const input = $('<input id=\"ultra_input\">')\n            input.val(value)\n\n            $('body').append(input)\n            input.focus()\n            input.select()\n\n            const res = document.execCommand('copy')\n            if (res) {\n                alert('Names and ids were copied successfully')\n            } else {\n                alert('Something went very wrong')\n            }\n\n        })\n        button.click()\n\n        $('#ultra_input').remove()\n    }\n    \n    copyToClipboard(JSON.stringify(data))\n})()`\n\nexport const getSetAbsentFunction = (data: Map<string, string[]>, groupId: string, dou_id: string, month: string, year: string) => {\n    const outerStyles = `position: fixed;\n                        background: #FFC0CBaa;\n                        top: 0;\n                        bottom: 0;\n                        left: 0;\n                        right: 0;\n                        display: flex;\n                        justify-content: center;\n                        align-items: center;`.split('\\n').map(a => a.trim()).join('')\n\n    const innerStyles = `color: #fff;\n                        font-weight: bold;\n                        font-size: 26px;\n                        background: #3333;\n                        border-radius: 8px;\n                        padding: 4px;`.split('\\n').map(a => a.trim()).join('')\n\n    const days = Array.from(data.keys())\n    const request = days.map(day => {\n        const dayStr = fillWithZeros(day, 2)\n        const monthStr = fillWithZeros(month, 2)\n        const dateStr = `${dayStr}.${monthStr}.${year}`\n\n        const childrenIds = data.get(day)\n        return `$.post('/cabinet/children/visit/save/?dou_id=${dou_id}', {children: '${childrenIds!.join('|')}', group: ${groupId}, date: '${dateStr}'}, function(data){\n            --completed\n            if (completed === 0) {\n                cover.remove()\n            }\n        });`\n    }).join('\\n')\n\n    return `\nlet completed = ${days.length}\n\nif (completed > 0) {\n\nlet cover = $('<div style=\"${outerStyles}\"><div style=\"${innerStyles}\">Ща, ща, погоди.</div></div>')\n$('body').append(cover)\n\n${request}\n\n}\n    `\n}","import React, {useState} from \"react\";\nimport {thirdStepText} from \"../App.text\";\nimport Card from \"../components/Card\";\nimport {Button, Title, Wrapper} from \"../App.styles\";\nimport {matchData} from \"../service/processing\";\n\ninterface Props {\n    parsedData: any,\n    tableData: any,\n    successfulMatches: Map<string, string> | null,\n    setSuccessfulMatches: (value: React.SetStateAction<Map<string, string> | null>) => void,\n}\n\nconst ThirdStep = ({parsedData, tableData, successfulMatches, setSuccessfulMatches,}: Props) => {\n    const [failedMatches, setFailedMatches] = useState<string[]>([])\n\n    const onSubmit = () => {\n        if (!parsedData || !tableData) {\n            alert('You should complete the first two steps before you are able to do that. The fuck are you thinking?')\n            return\n        }\n\n        const {failures, matchedIds} = matchData(parsedData.children, tableData.children)\n        setSuccessfulMatches(matchedIds)\n        setFailedMatches(failures)\n    }\n\n    return (\n        <Card title='Step 3' text={thirdStepText} completed={!!successfulMatches}>\n            {\n                !!failedMatches.length &&\n                <Wrapper><Title>Failed to match</Title>: {failedMatches.join(', ')}</Wrapper>\n            }\n            {\n                !successfulMatches &&\n                <Button type=\"submit\" onClick={onSubmit}>Submit</Button>\n            }\n        </Card>\n    )\n}\n\nexport default ThirdStep","import React from \"react\";\nimport {fourthStepText} from \"../App.text\";\nimport Card from \"../components/Card\";\nimport {Button} from \"../App.styles\";\nimport {getSetAbsentFunction} from \"../service/scraping\";\nimport {copyToClipboard} from \"../service/utils\";\n\ninterface Props {\n    parsedData: any,\n    tableData: any,\n    successfulMatches: Map<string, string> | null,\n}\n\nconst FourthStep = ({parsedData, tableData, successfulMatches}: Props) => {\n\n    const getFunction = () => {\n        if (!successfulMatches) {\n            alert('No matched data. Did you do the steps 1-3? The fuck are you thinking?')\n            return\n        }\n\n        const absentIds = new Map<string, string[]>()\n        for (const day in tableData.absentData) {\n            absentIds.set(day, tableData.absentData[day]\n                .map((name: string) => successfulMatches.get(name))\n                .filter((e: any) => !!e)\n            )\n        }\n\n        const setAbsentFunction = getSetAbsentFunction(absentIds, parsedData.groupId, parsedData.dou_id,\n            parsedData.month, parsedData.year)\n        copyToClipboard(setAbsentFunction)\n    }\n\n    return (\n        <Card title='Step 4' text={fourthStepText}>\n            <Button type=\"button\" onClick={getFunction}>Get Function</Button>\n        </Card>\n    )\n}\n\nexport default FourthStep","import React, {useState} from 'react';\nimport styled from \"styled-components\";\nimport FirstStep from \"./main/FirstStep\";\nimport SecondStep from \"./main/SecondStep\";\nimport ThirdStep from \"./main/ThirdStep\";\nimport FourthStep from \"./main/FourthStep\";\n\nconst Page = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n`\n\nconst StepsContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: start;\n  flex-wrap: wrap;\n`\n\nconst Title = styled.div`\n  font-size: 32px;\n  font-weight: bold;\n  margin: 12px auto 20px;\n`\n\n\nconst App = () => {\n    const [tableData, setTableData] = useState<any>(null)\n    const [parsedData, setParsedData] = useState<any>(null)\n    const [successfulMatches, setSuccessfulMatches] = useState<Map<string, string> | null>(null)\n\n    return (\n        <Page>\n            <Title>Useful stuff</Title>\n\n            <StepsContainer>\n                <FirstStep tableData={tableData} setTableData={setTableData}/>\n\n                <SecondStep parsedData={parsedData} setParsedData={setParsedData}/>\n\n                <ThirdStep parsedData={parsedData} tableData={tableData}\n                           successfulMatches={successfulMatches} setSuccessfulMatches={setSuccessfulMatches}/>\n\n                <FourthStep parsedData={parsedData} tableData={tableData} successfulMatches={successfulMatches}/>\n            </StepsContainer>\n\n        </Page>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}