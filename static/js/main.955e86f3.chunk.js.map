{"version":3,"sources":["common/AreaInput.tsx","service/utils.ts","App.tsx","service/processing.ts","service/scraping.ts","reportWebVitals.ts","index.tsx"],"names":["TextArea","styled","textarea","AreaInput","value","placeholder","onChange","copyToClipboard","INPUT_ID","button","$","click","input","val","append","focus","select","document","execCommand","alert","remove","fillWithZeros","length","result","Page","div","StepsContainer","Title","Block","Button","App","useState","rawCsv","setRawCsv","tableData","setTableData","scrapedData","setScrappedData","parsedData","setParsedData","successfulMatches","setSuccessfulMatches","failedMatches","setFailedMatches","e","target","type","onClick","childrenData","data","split","filter","line","test","reduce","res","rawData","child","children","push","days","array","element","index","indexOf","findAllOccurrences","map","date","findAbsentDates","absentData","i","forEach","day","structureTableData","JSON","parse","join","childrenIds","tableChildren","childrenNames","Object","keys","scrapedSecondNames","name","match","matches","failures","matchedIds","Map","id","set","matchData","absentIds","get","setAbsentFunction","groupId","dou_id","month","year","outerStyles","a","trim","innerStyles","Array","from","request","dayStr","monthStr","dateStr","getSetAbsentFunction","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.955e86f3.chunk.js","sourcesContent":["import React, {ChangeEvent} from 'react'\nimport styled from \"styled-components\";\n\ninterface Props {\n    value: string,\n    placeholder: string,\n    onChange: (e: ChangeEvent<HTMLTextAreaElement>) => void,\n}\n\nconst TextArea = styled.textarea`\n  resize: none;\n  width: 100%;\n  border: solid #333 1px;\n  border-radius: 4px;\n  padding: 4px;\n  height: 120px;\n  margin: 12px 0;\n`\n\nconst AreaInput = ({value, placeholder, onChange}: Props) => {\n    return (\n        <TextArea placeholder={placeholder} value={value} onChange={onChange}/>\n    )\n}\n\nexport default AreaInput","import $ from 'jquery'\n\nexport const copyToClipboard = (value: string) => {\n    const INPUT_ID = 'very_long_input_id'\n    const button = $('<button>!</button>')\n    button.click(() => {\n        const input = $(`<textarea id=\"${INPUT_ID}\">`)\n        input.val(value)\n\n        $('body').append(input)\n        input.focus()\n        input.select()\n\n        const res = document.execCommand('copy')\n        if (res) {\n            alert('Everything is copied successfully')\n        } else {\n            alert('Something is very wrong')\n        }\n\n    })\n    button.click()\n\n    $(`#${INPUT_ID}`).remove()\n}\n\nexport const fillWithZeros = (value: string, length: number): string => {\n    let result = value\n    while (result.length < length) {\n        result = '0' + result\n    }\n\n    return result\n}","import React, {ChangeEvent, useState} from 'react';\nimport styled from \"styled-components\";\nimport AreaInput from \"./common/AreaInput\";\nimport {matchData, structureTableData} from './service/processing'\nimport {getSetAbsentFunction, scrapChildrenFunction} from './service/scraping'\nimport {copyToClipboard} from './service/utils'\n\nconst Page = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n`\n\nconst StepsContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: start;\n  flex-wrap: wrap;\n`\n\nconst Title = styled.div`\n  font-size: 32px;\n  font-weight: bold;\n  margin: 12px auto 20px;\n`\n\nconst Block = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 420px;\n  margin: 8px;\n  box-shadow: 0 1px 5px rgba(0, 0, 0, .3), 0 3px 30px rgba(0, 0, 0, .3);\n  border-radius: 6px;\n  padding: 32px;\n`\n\nconst Button = styled.button`\n  border-radius: 4px;\n  border: solid 1px #333;\n  background: white;\n`\n\n\nconst App = () => {\n    const [rawCsv, setRawCsv] = useState('')\n    const [tableData, setTableData] = useState<any>(null)\n    const [scrapedData, setScrappedData] = useState('')\n    const [parsedData, setParsedData] = useState<any>(null)\n    const [successfulMatches, setSuccessfulMatches] = useState<Map<string, string> | null>(null)\n    const [failedMatches, setFailedMatches] = useState<string[]>([])\n\n\n    const onRawCsvSet = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        const value = e.target.value\n        setRawCsv(value)\n    }\n\n    const onScrappedDataSet = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        const value = e.target.value\n        setScrappedData(value)\n    }\n\n    const onStep1Submit = () => {\n        if (rawCsv === '') {\n            alert('The area you should have filled with the .csv data is empty. The fuck?')\n            return\n        }\n\n        const childrenData = structureTableData(rawCsv)\n        setTableData(childrenData)\n    }\n\n    const onStep2GetFunction = () => {\n        copyToClipboard(scrapChildrenFunction)\n    }\n\n    const onStep2Submit = () => {\n        if (scrapedData === '') {\n            alert('The area you should have filled with the scrapped children data is empty. The fuck?')\n            return\n        }\n\n        setParsedData(JSON.parse(scrapedData))\n    }\n\n    const onStep3Submit = () => {\n        if (!parsedData || !tableData) {\n            alert('You should complete the first two steps before you are able to do that. The fuck are you thinking?')\n            return\n        }\n\n        const {failures, matchedIds} = matchData(parsedData.children, tableData.children)\n        setSuccessfulMatches(matchedIds)\n        setFailedMatches(failures)\n    }\n\n    const onStep4GetFunction = () => {\n        if (!successfulMatches) {\n            alert('No matched data. Did you do the steps 1-3? The fuck are you thinking?')\n            return\n        }\n\n        const absentIds = new Map<string, string[]>()\n        for (const day in tableData.absentData) {\n            absentIds.set(day, tableData.absentData[day]\n                .map((name: string) => successfulMatches.get(name))\n                .filter((e: any) => !!e)\n            )\n        }\n\n        const setAbsentFunction = getSetAbsentFunction(absentIds, parsedData.groupId, parsedData.dou_id,\n            parsedData.month, parsedData.year)\n        copyToClipboard(setAbsentFunction)\n    }\n\n    return (\n        <Page>\n            <Title>Useful stuff</Title>\n\n            <StepsContainer>\n                <Block>\n                    <div><b>Step 1</b>: Copy and paste the .csv file contents into the text area and then press\n                        the Submit button to read the children data.\n                    </div>\n\n                    <div><b>Status</b>: {tableData ? 'Completed!' : 'Not completed'}</div>\n\n                    <AreaInput value={rawCsv} placeholder={'Paste the .csv file contents here'} onChange={onRawCsvSet}/>\n                    <Button type=\"submit\" onClick={onStep1Submit}>Submit</Button>\n                </Block>\n\n                <Block>\n                    <div><b>Step 2</b>: Press the Get Function button to copy the code to your clipboard.\n                        Paste and execute the code on the page with the children list to get the data.\n                    </div>\n\n                    <div><b>Status</b>: {parsedData ? 'Completed!' : 'Not completed'}</div>\n\n                    <Button type=\"button\" onClick={onStep2GetFunction}>Get Function</Button>\n\n                    <AreaInput value={scrapedData} placeholder={'Paste the result of the function here'}\n                               onChange={onScrappedDataSet}/>\n                    <Button type=\"submit\" onClick={onStep2Submit}>Submit</Button>\n                </Block>\n\n                <Block>\n                    <div><b>Step 3</b>: Map children from the .csv to the scrapped children from the web page.\n                    </div>\n\n                    {\n                        failedMatches &&\n                        <div><b>Failed to match</b>: {failedMatches.join(', ')}</div>\n                    }\n\n                    <div><b>Status</b>: {successfulMatches ? 'Completed!' : 'Not completed'}</div>\n\n                    <Button type=\"submit\" onClick={onStep3Submit}>Submit</Button>\n                </Block>\n\n                <Block>\n                    <div><b>Step 4</b>: Press the Get Function button to copy the code to your clipboard.\n                        Paste and execute the code on the page with the children list to set the data from the .csv.\n                    </div>\n\n                    <Button type=\"button\" onClick={onStep4GetFunction}>Get Function</Button>\n                </Block>\n            </StepsContainer>\n\n        </Page>\n    )\n}\n\nexport default App\n","const findAllOccurrences = (array: any[], element: any) => {\n    const result = []\n    let index = 0\n\n    while (true) {\n        index = array.indexOf(element, index + 1)\n        if (index === -1) {\n            break\n        } else {\n            result.push(index)\n        }\n    }\n\n    return result\n}\n\nconst findAbsentDates = (data: string[]) => {\n    const absentMarker = 'нн'\n    const meaninglessColumnCount = 4 // five meaningless columns and the count starts from one\n    const absentDates = findAllOccurrences(data, absentMarker)\n\n    return absentDates.map(date => date - meaninglessColumnCount)\n}\n\nexport const structureTableData = (data: string) => {\n    const significantLines = data.split('\\n').filter(line => /^[0-9]+,.*$/.test(line))\n\n    const {children, days} = significantLines.reduce((res: any, line: string) => {\n        const rawData = line.split(',')\n        const child = rawData[1]\n        res.children.push(child)\n        res.days.push(findAbsentDates(rawData))\n\n        return res\n    }, {children: [], days: []})\n\n    const absentData: any = {}\n    for (let i = 0; i < children.length; ++i) {\n        const child = children[i]\n        days[i].forEach((day: number) => {\n            if (!absentData[day]) {\n                absentData[day] = []\n            }\n\n            absentData[day].push(child)\n        })\n    }\n\n    return {children, absentData}\n}\n\nexport const matchData = (childrenIds: { [key: string]: string }, tableChildren: string[]) => {\n    const childrenNames = Object.keys(childrenIds)\n    const scrapedSecondNames = childrenNames.map(name => {\n        const match = name.match(/^(.+) .\\. .\\._.*$/)\n        if (match && match[1]) {\n            return match[1]\n        }\n        return name\n    })\n\n    const tableSecondNames = tableChildren.map(name => name.split(' ')[0])\n\n    const matches = tableSecondNames.map(name => {\n        const index = scrapedSecondNames.indexOf(name)\n        if (index === -1) {\n            return null\n        }\n\n        scrapedSecondNames[index] = ''\n        return childrenIds[childrenNames[index]]\n    })\n\n    const failures = []\n    const matchedIds = new Map<string, string>()\n    for (let i = 0; i < matches.length; ++i) {\n        const name = tableChildren[i]\n        const id = matches[i]\n        if (id) {\n            matchedIds.set(name, id)\n        } else {\n            failures.push(name)\n        }\n\n    }\n\n    return {failures, matchedIds}\n}","import {fillWithZeros} from \"./utils\";\n\nexport const scrapChildrenFunction = `(function() {\n    const children = Array.from($('.j_tr')).slice(1, -1).map(row => {\n        const cells = Array.from($(row).children('td'))\n        const name = cells[1].innerText\n        const id = cells[2].getAttribute('child')\n\n        return {id, name}\n    }).reduce((res, child) => {\n        res[child.name + '_' + child.id] = child.id\n        return res\n    }, {})\n    \n    const groupId = $('#id_group')[0].value\n    const dou_id = $('[name=\"dou_id\"]')[0].value\n    const month = $('#id_period')[0].value\n    const year = $('#id_year')[0].value\n    \n    const data = {children, groupId, dou_id, month, year}\n\n    const copyToClipboard = (value) => {\n        const button = $('<button>!</button>')\n        button.click(() => {\n            const input = $('<input id=\"ultra_input\">')\n            input.val(value)\n\n            $('body').append(input)\n            input.focus()\n            input.select()\n\n            const res = document.execCommand('copy')\n            if (res) {\n                alert('Names and ids were copied successfully')\n            } else {\n                alert('Something went very wrong')\n            }\n\n        })\n        button.click()\n\n        $('#ultra_input').remove()\n    }\n    \n    copyToClipboard(JSON.stringify(data))\n})()`\n\nexport const getSetAbsentFunction = (data: Map<string, string[]>, groupId: string, dou_id: string, month: string, year: string) => {\n    const outerStyles = `position: absolute;\n                        background: #FFC0CBaa;\n                        top: 0;\n                        bottom: 0;\n                        left: 0;\n                        right: 0;\n                        display: flex;\n                        justify-content: center;\n                        align-items: center;`.split('\\n').map(a => a.trim()).join('')\n\n    const innerStyles = `color: #fff;\n                        font-weight: bold;\n                        font-size: 26px;\n                        background: #3333;\n                        border-radius: 8px;\n                        padding: 4px;`.split('\\n').map(a => a.trim()).join('')\n\n    const days = Array.from(data.keys())\n    const request = days.map(day => {\n        const dayStr = fillWithZeros(day, 2)\n        const monthStr = fillWithZeros(month, 2)\n        const dateStr = `${dayStr}.${monthStr}.${year}`\n\n        const childrenIds = data.get(day)\n        return `$.post('/cabinet/children/visit/save/?dou_id=${dou_id}', {children: '${childrenIds!.join('|')}', group: ${groupId}, date: '${dateStr}'}, function(data){\n            --completed\n            if (completed === 0) {\n                cover.remove()\n            }\n        });`\n    }).join('\\n')\n\n    return `\ndocument.documentElement.scrollTop = 0\nlet cover = $('<div style=\"${outerStyles}\"><div style=\"${innerStyles}\">Ща, ща, погоди.</div></div>')\n$('body').append(cover)\n        \nlet completed = ${days.length}\n${request}\n    `\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}